// Cava auto-generated SystemVerilog. Do not hand edit.
module aes_cipher_core #( parameter bit AES192Enable = 1, parameter SBoxImpl = "lut") (
  input logic [1:0][3:0][3:0][7:0]key_init_i, 
  input logic [3:0][3:0][7:0]state_init_i, 
  input logic [3:0][3:0][7:0]prng_data_i, 
  input logic [2:0]key_len_i, 
  input logic op_i, 
  input logic data_out_clear_i, 
  input logic key_clear_i, 
  input logic dec_key_gen_i, 
  input logic crypt_i, 
  input logic out_ready_i, 
  input logic in_valid_i, 
  input logic rst_ni, 
  input logic clk_i, 
  output logic [3:0][3:0][7:0]state_o, 
  output logic data_out_clear_o, 
  output logic key_clear_o, 
  output logic dec_key_gen_o, 
  output logic crypt_o, 
  output logic out_valid_o, 
  output logic in_ready_o
  );


  logic net[0:743];
logic [1:0][3:0][3:0][7:0]v0;
logic [3:0][3:0][7:0]v1;
logic [2:0]v2;
logic [3:0]v3;
logic [3:0]v4;
logic [1:0]v5;
logic [1:0]v6;
logic [1:0]v7;
logic [1:0]v8;
logic [2:0]v9;
logic [1:0]v10;
logic [1:0]v11;
logic [1:0]v12;
logic [1:0][1:0]v13;
logic [0:0]v14;
logic [1:0]v15;
logic [1:0][1:0]v16;
logic [0:0]v17;
logic [1:0]v18;
logic [5:0]v19;
logic [2:0]v20;
logic [1:0]v21;
logic [1:0]v22;
logic [1:0]v23;
logic [1:0][1:0]v24;
logic [0:0]v25;
logic [1:0]v26;
logic [1:0][1:0]v27;
logic [0:0]v28;
logic [1:0]v29;
logic [3:0]v30;
logic [4:0]v31;
logic [3:0]v32;
logic [3:0]v33;
logic [1:0]v34;
logic [0:0]v35;
logic [5:0]v36;
logic [2:0]v37;
logic [1:0]v38;
logic [1:0]v39;
logic [1:0]v40;
logic [1:0][1:0]v41;
logic [0:0]v42;
logic [1:0]v43;
logic [1:0][1:0]v44;
logic [0:0]v45;
logic [1:0]v46;
logic [1:0]v47;
logic [0:0]v48;
logic [5:0]v49;
logic [2:0]v50;
logic [1:0]v51;
logic [1:0]v52;
logic [1:0]v53;
logic [1:0][1:0]v54;
logic [0:0]v55;
logic [1:0]v56;
logic [1:0][1:0]v57;
logic [0:0]v58;
logic [1:0]v59;
logic [2:0]v60;
logic [2:0]v61;
logic [1:0]v62;
logic [0:0]v63;
logic [1:0]v64;
logic [0:0]v65;
logic [5:0]v66;
logic [2:0]v67;
logic [1:0]v68;
logic [1:0]v69;
logic [1:0]v70;
logic [1:0][1:0]v71;
logic [0:0]v72;
logic [1:0]v73;
logic [1:0][1:0]v74;
logic [0:0]v75;
logic [1:0]v76;
logic [3:0]v77;
logic [4:0]v78;
logic [3:0]v79;
logic [3:0]v80;
logic [1:0]v81;
logic [0:0]v82;
logic [1:0]v83;
logic [0:0]v84;
logic [5:0]v85;
logic [2:0]v86;
logic [1:0]v87;
logic [1:0]v88;
logic [1:0]v89;
logic [1:0][1:0]v90;
logic [0:0]v91;
logic [1:0]v92;
logic [1:0][1:0]v93;
logic [0:0]v94;
logic [1:0]v95;
logic [2:0]v96;
logic [2:0]v97;
logic [1:0]v98;
logic [0:0]v99;
logic [5:0]v100;
logic [2:0]v101;
logic [1:0]v102;
logic [1:0]v103;
logic [1:0]v104;
logic [1:0][1:0]v105;
logic [0:0]v106;
logic [1:0]v107;
logic [1:0][1:0]v108;
logic [0:0]v109;
logic [1:0]v110;
logic [5:0]v111;
logic [1:0]v112;
logic [1:0]v113;
logic [1:0][1:0]v114;
logic [0:0]v115;
logic [1:0]v116;
logic [2:0][1:0]v117;
logic [1:0]v118;
logic [1:0]v119;
logic [1:0]v120;
logic [1:0][1:0]v121;
logic [0:0]v122;
logic [1:0]v123;
logic [1:0][1:0]v124;
logic [0:0]v125;
logic [1:0]v126;
logic [1:0]v127;
logic [1:0]v128;
logic [1:0][1:0]v129;
logic [0:0]v130;
logic [1:0]v131;
logic [1:0]v132;
logic [5:0][1:0]v133;
logic [1:0]v134;
logic [2:0][1:0]v135;
logic [1:0]v136;
logic [1:0]v137;
logic [1:0]v138;
logic [1:0][1:0]v139;
logic [0:0]v140;
logic [1:0]v141;
logic [1:0][1:0]v142;
logic [0:0]v143;
logic [1:0]v144;
logic [1:0]v145;
logic [1:0]v146;
logic [1:0]v147;
logic [1:0]v148;
logic [1:0][1:0]v149;
logic [0:0]v150;
logic [1:0]v151;
logic [5:0][1:0]v152;
logic [1:0]v153;
logic [1:0]v154;
logic [1:0]v155;
logic [1:0][1:0]v156;
logic [0:0]v157;
logic [1:0]v158;
logic [1:0]v159;
logic [1:0][1:0]v160;
logic [0:0]v161;
logic [1:0]v162;
logic [2:0][1:0]v163;
logic [1:0]v164;
logic [1:0]v165;
logic [1:0]v166;
logic [1:0][1:0]v167;
logic [0:0]v168;
logic [1:0]v169;
logic [1:0][1:0]v170;
logic [0:0]v171;
logic [1:0]v172;
logic [1:0]v173;
logic [1:0]v174;
logic [1:0][1:0]v175;
logic [0:0]v176;
logic [1:0]v177;
logic [5:0][1:0]v178;
logic [1:0]v179;
logic [2:0]v180;
logic [1:0]v181;
logic [1:0]v182;
logic [1:0]v183;
logic [1:0][1:0]v184;
logic [0:0]v185;
logic [1:0]v186;
logic [1:0][1:0]v187;
logic [0:0]v188;
logic [1:0]v189;
logic [1:0]v190;
logic [0:0]v191;
logic [5:0]v192;
logic [2:0][1:0]v193;
logic [1:0]v194;
logic [1:0]v195;
logic [1:0]v196;
logic [1:0][1:0]v197;
logic [0:0]v198;
logic [1:0]v199;
logic [1:0][1:0]v200;
logic [0:0]v201;
logic [1:0]v202;
logic [1:0]v203;
logic [1:0]v204;
logic [1:0]v205;
logic [1:0][1:0]v206;
logic [0:0]v207;
logic [1:0]v208;
logic [1:0]v209;
logic [1:0][1:0]v210;
logic [0:0]v211;
logic [1:0]v212;
logic [1:0]v213;
logic [1:0]v214;
logic [1:0][1:0]v215;
logic [0:0]v216;
logic [1:0]v217;
logic [1:0]v218;
logic [1:0][1:0]v219;
logic [0:0]v220;
logic [1:0]v221;
logic [1:0]v222;
logic [1:0]v223;
logic [1:0][1:0]v224;
logic [0:0]v225;
logic [1:0]v226;
logic [1:0]v227;
logic [1:0][1:0]v228;
logic [0:0]v229;
logic [1:0]v230;
logic [1:0]v231;
logic [1:0][1:0]v232;
logic [0:0]v233;
logic [1:0]v234;
logic [5:0][1:0]v235;
logic [1:0]v236;
logic [2:0]v237;
logic [1:0]v238;
logic [1:0]v239;
logic [1:0]v240;
logic [1:0][1:0]v241;
logic [0:0]v242;
logic [1:0]v243;
logic [1:0][1:0]v244;
logic [0:0]v245;
logic [1:0]v246;
logic [1:0]v247;
logic [0:0]v248;
logic [1:0]v249;
logic [0:0]v250;
logic [5:0]v251;
logic [2:0]v252;
logic [2:0]v253;
logic [1:0][2:0]v254;
logic [0:0]v255;
logic [2:0]v256;
logic [2:0]v257;
logic [2:0][2:0]v258;
logic [1:0]v259;
logic [1:0]v260;
logic [1:0]v261;
logic [1:0][1:0]v262;
logic [0:0]v263;
logic [1:0]v264;
logic [1:0][1:0]v265;
logic [0:0]v266;
logic [1:0]v267;
logic [2:0]v268;
logic [2:0]v269;
logic [3:0]v270;
logic [4:0]v271;
logic [3:0]v272;
logic [3:0]v273;
logic [2:0]v274;
logic [3:0]v275;
logic [4:0]v276;
logic [3:0]v277;
logic [3:0]v278;
logic [2:0]v279;
logic [1:0][2:0]v280;
logic [0:0]v281;
logic [2:0]v282;
logic [1:0][2:0]v283;
logic [0:0]v284;
logic [2:0]v285;
logic [2:0]v286;
logic [1:0][2:0]v287;
logic [0:0]v288;
logic [2:0]v289;
logic [2:0]v290;
logic [2:0]v291;
logic [1:0][2:0]v292;
logic [0:0]v293;
logic [2:0]v294;
logic [5:0][2:0]v295;
logic [2:0]v296;
logic [3:0]v297;
logic [2:0][3:0]v298;
logic [1:0]v299;
logic [1:0]v300;
logic [1:0]v301;
logic [1:0][1:0]v302;
logic [0:0]v303;
logic [1:0]v304;
logic [1:0][1:0]v305;
logic [0:0]v306;
logic [1:0]v307;
logic [3:0]v308;
logic [3:0]v309;
logic [4:0]v310;
logic [3:0]v311;
logic [3:0]v312;
logic [4:0]v313;
logic [3:0]v314;
logic [5:0][3:0]v315;
logic [3:0]v316;
logic [3:0]v317;
logic [2:0][3:0]v318;
logic [1:0]v319;
logic [1:0]v320;
logic [1:0]v321;
logic [1:0][1:0]v322;
logic [0:0]v323;
logic [1:0]v324;
logic [1:0][1:0]v325;
logic [0:0]v326;
logic [1:0]v327;
logic [3:0]v328;
logic [5:0][3:0]v329;
logic [3:0]v330;
logic [2:0]v331;
logic [1:0]v332;
logic [1:0]v333;
logic [1:0]v334;
logic [1:0][1:0]v335;
logic [0:0]v336;
logic [1:0]v337;
logic [1:0][1:0]v338;
logic [0:0]v339;
logic [1:0]v340;
logic [1:0]v341;
logic [0:0]v342;
logic [5:0]v343;
logic [2:0]v344;
logic [1:0]v345;
logic [1:0]v346;
logic [1:0]v347;
logic [1:0][1:0]v348;
logic [0:0]v349;
logic [1:0]v350;
logic [1:0][1:0]v351;
logic [0:0]v352;
logic [1:0]v353;
logic [3:0]v354;
logic [4:0]v355;
logic [3:0]v356;
logic [3:0]v357;
logic [1:0]v358;
logic [0:0]v359;
logic [1:0]v360;
logic [0:0]v361;
logic [5:0]v362;
logic [2:0]v363;
logic [1:0]v364;
logic [1:0]v365;
logic [1:0]v366;
logic [1:0][1:0]v367;
logic [0:0]v368;
logic [1:0]v369;
logic [1:0][1:0]v370;
logic [0:0]v371;
logic [1:0]v372;
logic [1:0]v373;
logic [0:0]v374;
logic [5:0]v375;
logic [2:0]v376;
logic [1:0]v377;
logic [1:0]v378;
logic [1:0]v379;
logic [1:0][1:0]v380;
logic [0:0]v381;
logic [1:0]v382;
logic [1:0][1:0]v383;
logic [0:0]v384;
logic [1:0]v385;
logic [1:0]v386;
logic [0:0]v387;
logic [5:0]v388;
logic [1:0]v389;
logic [0:0]v390;
logic [3:0]v391;
logic [4:0]v392;
logic [3:0]v393;
logic [3:0]v394;
logic [1:0][3:0][3:0][7:0]v395;
logic [1:0][3:0][3:0][7:0]v396;
logic [3:0][1:0][3:0][3:0][7:0]v397;
logic [1:0][3:0][3:0][7:0]v398;
logic [1:0][1:0][3:0][3:0][7:0]v399;
logic [0:0]v400;
logic [1:0][3:0][3:0][7:0]v401;
logic [3:0][3:0][7:0]v402;
logic [3:0][3:0][7:0]v403;
logic [3:0]v404;
logic [3:0]v405;
logic [3:0][3:0][3:0][7:0]v406;
logic [3:0][3:0][7:0]v407;
logic [3:0][7:0]v408;
logic [3:0][7:0]v409;
logic [3:0][7:0]v410;
logic [3:0][7:0]v411;
logic [7:0]v412;
logic [7:0]v413;
logic [7:0]v414;
logic [7:0]v415;
logic [7:0]v416;
logic [7:0]v417;
logic [7:0]v418;
logic [7:0]v419;
logic [7:0]v420;
logic [7:0]v421;
logic [7:0]v422;
logic [7:0]v423;
logic [7:0]v424;
logic [7:0]v425;
logic [7:0]v426;
logic [7:0]v427;
logic [3:0][7:0]v428;
logic [3:0][7:0]v429;
logic [3:0][7:0]v430;
logic [3:0][7:0]v431;
logic [3:0][3:0][7:0]v432;
logic [3:0][3:0][7:0]v433;
logic [3:0]v434;
logic [1:0][3:0][3:0][7:0]v435;
logic [0:0]v436;
logic [3:0][3:0][7:0]v437;
logic [3:0]v438;
logic [1:0]v439;
logic [3:0][7:0]v440;
logic [3:0][7:0]v441;
logic [3:0][7:0]v442;
logic [3:0][7:0]v443;
logic [7:0]v444;
logic [7:0]v445;
logic [7:0]v446;
logic [7:0]v447;
logic [7:0]v448;
logic [7:0]v449;
logic [7:0]v450;
logic [7:0]v451;
logic [3:0][7:0]v452;
logic [7:0]v453;
logic [7:0]v454;
logic [7:0]v455;
logic [7:0]v456;
logic [7:0]v457;
logic [7:0]v458;
logic [7:0]v459;
logic [7:0]v460;
logic [3:0][7:0]v461;
logic [7:0]v462;
logic [7:0]v463;
logic [7:0]v464;
logic [7:0]v465;
logic [7:0]v466;
logic [7:0]v467;
logic [7:0]v468;
logic [7:0]v469;
logic [3:0][7:0]v470;
logic [7:0]v471;
logic [7:0]v472;
logic [7:0]v473;
logic [7:0]v474;
logic [7:0]v475;
logic [7:0]v476;
logic [7:0]v477;
logic [7:0]v478;
logic [3:0][7:0]v479;
logic [3:0][3:0][7:0]v480;
logic [3:0][3:0][7:0]v481;
logic [3:0][3:0][7:0]v482;
logic [3:0][3:0][3:0][7:0]v483;
logic [3:0][3:0][7:0]v484;
logic [3:0][3:0][7:0]v485;
logic [1:0][3:0][3:0][7:0]v486;
logic [0:0]v487;
logic [3:0][3:0][7:0]v488;
logic [3:0][7:0]v489;
logic [3:0][7:0]v490;
logic [3:0][7:0]v491;
logic [3:0][7:0]v492;
logic [3:0][7:0]v493;
logic [3:0][7:0]v494;
logic [3:0][7:0]v495;
logic [3:0][7:0]v496;
logic [7:0]v497;
logic [7:0]v498;
logic [7:0]v499;
logic [7:0]v500;
logic [7:0]v501;
logic [7:0]v502;
logic [7:0]v503;
logic [7:0]v504;
logic [7:0]v505;
logic [7:0]v506;
logic [7:0]v507;
logic [7:0]v508;
logic [3:0][7:0]v509;
logic [7:0]v510;
logic [7:0]v511;
logic [7:0]v512;
logic [7:0]v513;
logic [7:0]v514;
logic [7:0]v515;
logic [7:0]v516;
logic [7:0]v517;
logic [7:0]v518;
logic [7:0]v519;
logic [7:0]v520;
logic [7:0]v521;
logic [3:0][7:0]v522;
logic [7:0]v523;
logic [7:0]v524;
logic [7:0]v525;
logic [7:0]v526;
logic [7:0]v527;
logic [7:0]v528;
logic [7:0]v529;
logic [7:0]v530;
logic [7:0]v531;
logic [7:0]v532;
logic [7:0]v533;
logic [7:0]v534;
logic [3:0][7:0]v535;
logic [7:0]v536;
logic [7:0]v537;
logic [7:0]v538;
logic [7:0]v539;
logic [7:0]v540;
logic [7:0]v541;
logic [7:0]v542;
logic [7:0]v543;
logic [7:0]v544;
logic [7:0]v545;
logic [7:0]v546;
logic [7:0]v547;
logic [3:0][7:0]v548;
logic [3:0][3:0][7:0]v549;

  assign state_o = v549;
  assign data_out_clear_o = net[3];
  assign key_clear_o = net[2];
  assign dec_key_gen_o = net[1];
  assign crypt_o = net[0];
  assign out_valid_o = net[41];
  assign in_ready_o = net[9];
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      v0 <= {{{8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}}, {{8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}}};
    end else
      if (1'b1) begin
        v0 <= v401;
    end
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      v433 <= {{8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}};
    end else
      if (1'b1) begin
        v433 <= v549;
    end
  end

  assign v549 = {v548, v535, v522, v509};
  assign v548 = {v547, v546, v545, v544};
  assign v547 = {net[743], net[742], net[741], net[740], net[739], net[738], net[737], net[736]};
  xor inst_12 (net[743], net[727], net[735]);
  xor inst_13 (net[742], net[726], net[734]);
  xor inst_14 (net[741], net[725], net[733]);
  xor inst_15 (net[740], net[724], net[732]);
  xor inst_16 (net[739], net[723], net[731]);
  xor inst_17 (net[738], net[722], net[730]);
  xor inst_18 (net[737], net[721], net[729]);
  xor inst_19 (net[736], net[720], net[728]);
  assign net[735] = v543[7];
  assign net[734] = v543[6];
  assign net[733] = v543[5];
  assign net[732] = v543[4];
  assign net[731] = v543[3];
  assign net[730] = v543[2];
  assign net[729] = v543[1];
  assign net[728] = v543[0];
  assign net[727] = v539[7];
  assign net[726] = v539[6];
  assign net[725] = v539[5];
  assign net[724] = v539[4];
  assign net[723] = v539[3];
  assign net[722] = v539[2];
  assign net[721] = v539[1];
  assign net[720] = v539[0];
  assign v546 = {net[719], net[718], net[717], net[716], net[715], net[714], net[713], net[712]};
  xor inst_37 (net[719], net[703], net[711]);
  xor inst_38 (net[718], net[702], net[710]);
  xor inst_39 (net[717], net[701], net[709]);
  xor inst_40 (net[716], net[700], net[708]);
  xor inst_41 (net[715], net[699], net[707]);
  xor inst_42 (net[714], net[698], net[706]);
  xor inst_43 (net[713], net[697], net[705]);
  xor inst_44 (net[712], net[696], net[704]);
  assign net[711] = v542[7];
  assign net[710] = v542[6];
  assign net[709] = v542[5];
  assign net[708] = v542[4];
  assign net[707] = v542[3];
  assign net[706] = v542[2];
  assign net[705] = v542[1];
  assign net[704] = v542[0];
  assign net[703] = v538[7];
  assign net[702] = v538[6];
  assign net[701] = v538[5];
  assign net[700] = v538[4];
  assign net[699] = v538[3];
  assign net[698] = v538[2];
  assign net[697] = v538[1];
  assign net[696] = v538[0];
  assign v545 = {net[695], net[694], net[693], net[692], net[691], net[690], net[689], net[688]};
  xor inst_62 (net[695], net[679], net[687]);
  xor inst_63 (net[694], net[678], net[686]);
  xor inst_64 (net[693], net[677], net[685]);
  xor inst_65 (net[692], net[676], net[684]);
  xor inst_66 (net[691], net[675], net[683]);
  xor inst_67 (net[690], net[674], net[682]);
  xor inst_68 (net[689], net[673], net[681]);
  xor inst_69 (net[688], net[672], net[680]);
  assign net[687] = v541[7];
  assign net[686] = v541[6];
  assign net[685] = v541[5];
  assign net[684] = v541[4];
  assign net[683] = v541[3];
  assign net[682] = v541[2];
  assign net[681] = v541[1];
  assign net[680] = v541[0];
  assign net[679] = v537[7];
  assign net[678] = v537[6];
  assign net[677] = v537[5];
  assign net[676] = v537[4];
  assign net[675] = v537[3];
  assign net[674] = v537[2];
  assign net[673] = v537[1];
  assign net[672] = v537[0];
  assign v544 = {net[671], net[670], net[669], net[668], net[667], net[666], net[665], net[664]};
  xor inst_87 (net[671], net[655], net[663]);
  xor inst_88 (net[670], net[654], net[662]);
  xor inst_89 (net[669], net[653], net[661]);
  xor inst_90 (net[668], net[652], net[660]);
  xor inst_91 (net[667], net[651], net[659]);
  xor inst_92 (net[666], net[650], net[658]);
  xor inst_93 (net[665], net[649], net[657]);
  xor inst_94 (net[664], net[648], net[656]);
  assign net[663] = v540[7];
  assign net[662] = v540[6];
  assign net[661] = v540[5];
  assign net[660] = v540[4];
  assign net[659] = v540[3];
  assign net[658] = v540[2];
  assign net[657] = v540[1];
  assign net[656] = v540[0];
  assign net[655] = v536[7];
  assign net[654] = v536[6];
  assign net[653] = v536[5];
  assign net[652] = v536[4];
  assign net[651] = v536[3];
  assign net[650] = v536[2];
  assign net[649] = v536[1];
  assign net[648] = v536[0];
  assign v543 = v496[3];
  assign v542 = v496[2];
  assign v541 = v496[1];
  assign v540 = v496[0];
  assign v539 = v492[3];
  assign v538 = v492[2];
  assign v537 = v492[1];
  assign v536 = v492[0];
  assign v535 = {v534, v533, v532, v531};
  assign v534 = {net[647], net[646], net[645], net[644], net[643], net[642], net[641], net[640]};
  xor inst_121 (net[647], net[631], net[639]);
  xor inst_122 (net[646], net[630], net[638]);
  xor inst_123 (net[645], net[629], net[637]);
  xor inst_124 (net[644], net[628], net[636]);
  xor inst_125 (net[643], net[627], net[635]);
  xor inst_126 (net[642], net[626], net[634]);
  xor inst_127 (net[641], net[625], net[633]);
  xor inst_128 (net[640], net[624], net[632]);
  assign net[639] = v530[7];
  assign net[638] = v530[6];
  assign net[637] = v530[5];
  assign net[636] = v530[4];
  assign net[635] = v530[3];
  assign net[634] = v530[2];
  assign net[633] = v530[1];
  assign net[632] = v530[0];
  assign net[631] = v526[7];
  assign net[630] = v526[6];
  assign net[629] = v526[5];
  assign net[628] = v526[4];
  assign net[627] = v526[3];
  assign net[626] = v526[2];
  assign net[625] = v526[1];
  assign net[624] = v526[0];
  assign v533 = {net[623], net[622], net[621], net[620], net[619], net[618], net[617], net[616]};
  xor inst_146 (net[623], net[607], net[615]);
  xor inst_147 (net[622], net[606], net[614]);
  xor inst_148 (net[621], net[605], net[613]);
  xor inst_149 (net[620], net[604], net[612]);
  xor inst_150 (net[619], net[603], net[611]);
  xor inst_151 (net[618], net[602], net[610]);
  xor inst_152 (net[617], net[601], net[609]);
  xor inst_153 (net[616], net[600], net[608]);
  assign net[615] = v529[7];
  assign net[614] = v529[6];
  assign net[613] = v529[5];
  assign net[612] = v529[4];
  assign net[611] = v529[3];
  assign net[610] = v529[2];
  assign net[609] = v529[1];
  assign net[608] = v529[0];
  assign net[607] = v525[7];
  assign net[606] = v525[6];
  assign net[605] = v525[5];
  assign net[604] = v525[4];
  assign net[603] = v525[3];
  assign net[602] = v525[2];
  assign net[601] = v525[1];
  assign net[600] = v525[0];
  assign v532 = {net[599], net[598], net[597], net[596], net[595], net[594], net[593], net[592]};
  xor inst_171 (net[599], net[583], net[591]);
  xor inst_172 (net[598], net[582], net[590]);
  xor inst_173 (net[597], net[581], net[589]);
  xor inst_174 (net[596], net[580], net[588]);
  xor inst_175 (net[595], net[579], net[587]);
  xor inst_176 (net[594], net[578], net[586]);
  xor inst_177 (net[593], net[577], net[585]);
  xor inst_178 (net[592], net[576], net[584]);
  assign net[591] = v528[7];
  assign net[590] = v528[6];
  assign net[589] = v528[5];
  assign net[588] = v528[4];
  assign net[587] = v528[3];
  assign net[586] = v528[2];
  assign net[585] = v528[1];
  assign net[584] = v528[0];
  assign net[583] = v524[7];
  assign net[582] = v524[6];
  assign net[581] = v524[5];
  assign net[580] = v524[4];
  assign net[579] = v524[3];
  assign net[578] = v524[2];
  assign net[577] = v524[1];
  assign net[576] = v524[0];
  assign v531 = {net[575], net[574], net[573], net[572], net[571], net[570], net[569], net[568]};
  xor inst_196 (net[575], net[559], net[567]);
  xor inst_197 (net[574], net[558], net[566]);
  xor inst_198 (net[573], net[557], net[565]);
  xor inst_199 (net[572], net[556], net[564]);
  xor inst_200 (net[571], net[555], net[563]);
  xor inst_201 (net[570], net[554], net[562]);
  xor inst_202 (net[569], net[553], net[561]);
  xor inst_203 (net[568], net[552], net[560]);
  assign net[567] = v527[7];
  assign net[566] = v527[6];
  assign net[565] = v527[5];
  assign net[564] = v527[4];
  assign net[563] = v527[3];
  assign net[562] = v527[2];
  assign net[561] = v527[1];
  assign net[560] = v527[0];
  assign net[559] = v523[7];
  assign net[558] = v523[6];
  assign net[557] = v523[5];
  assign net[556] = v523[4];
  assign net[555] = v523[3];
  assign net[554] = v523[2];
  assign net[553] = v523[1];
  assign net[552] = v523[0];
  assign v530 = v495[3];
  assign v529 = v495[2];
  assign v528 = v495[1];
  assign v527 = v495[0];
  assign v526 = v491[3];
  assign v525 = v491[2];
  assign v524 = v491[1];
  assign v523 = v491[0];
  assign v522 = {v521, v520, v519, v518};
  assign v521 = {net[551], net[550], net[549], net[548], net[547], net[546], net[545], net[544]};
  xor inst_230 (net[551], net[535], net[543]);
  xor inst_231 (net[550], net[534], net[542]);
  xor inst_232 (net[549], net[533], net[541]);
  xor inst_233 (net[548], net[532], net[540]);
  xor inst_234 (net[547], net[531], net[539]);
  xor inst_235 (net[546], net[530], net[538]);
  xor inst_236 (net[545], net[529], net[537]);
  xor inst_237 (net[544], net[528], net[536]);
  assign net[543] = v517[7];
  assign net[542] = v517[6];
  assign net[541] = v517[5];
  assign net[540] = v517[4];
  assign net[539] = v517[3];
  assign net[538] = v517[2];
  assign net[537] = v517[1];
  assign net[536] = v517[0];
  assign net[535] = v513[7];
  assign net[534] = v513[6];
  assign net[533] = v513[5];
  assign net[532] = v513[4];
  assign net[531] = v513[3];
  assign net[530] = v513[2];
  assign net[529] = v513[1];
  assign net[528] = v513[0];
  assign v520 = {net[527], net[526], net[525], net[524], net[523], net[522], net[521], net[520]};
  xor inst_255 (net[527], net[511], net[519]);
  xor inst_256 (net[526], net[510], net[518]);
  xor inst_257 (net[525], net[509], net[517]);
  xor inst_258 (net[524], net[508], net[516]);
  xor inst_259 (net[523], net[507], net[515]);
  xor inst_260 (net[522], net[506], net[514]);
  xor inst_261 (net[521], net[505], net[513]);
  xor inst_262 (net[520], net[504], net[512]);
  assign net[519] = v516[7];
  assign net[518] = v516[6];
  assign net[517] = v516[5];
  assign net[516] = v516[4];
  assign net[515] = v516[3];
  assign net[514] = v516[2];
  assign net[513] = v516[1];
  assign net[512] = v516[0];
  assign net[511] = v512[7];
  assign net[510] = v512[6];
  assign net[509] = v512[5];
  assign net[508] = v512[4];
  assign net[507] = v512[3];
  assign net[506] = v512[2];
  assign net[505] = v512[1];
  assign net[504] = v512[0];
  assign v519 = {net[503], net[502], net[501], net[500], net[499], net[498], net[497], net[496]};
  xor inst_280 (net[503], net[487], net[495]);
  xor inst_281 (net[502], net[486], net[494]);
  xor inst_282 (net[501], net[485], net[493]);
  xor inst_283 (net[500], net[484], net[492]);
  xor inst_284 (net[499], net[483], net[491]);
  xor inst_285 (net[498], net[482], net[490]);
  xor inst_286 (net[497], net[481], net[489]);
  xor inst_287 (net[496], net[480], net[488]);
  assign net[495] = v515[7];
  assign net[494] = v515[6];
  assign net[493] = v515[5];
  assign net[492] = v515[4];
  assign net[491] = v515[3];
  assign net[490] = v515[2];
  assign net[489] = v515[1];
  assign net[488] = v515[0];
  assign net[487] = v511[7];
  assign net[486] = v511[6];
  assign net[485] = v511[5];
  assign net[484] = v511[4];
  assign net[483] = v511[3];
  assign net[482] = v511[2];
  assign net[481] = v511[1];
  assign net[480] = v511[0];
  assign v518 = {net[479], net[478], net[477], net[476], net[475], net[474], net[473], net[472]};
  xor inst_305 (net[479], net[463], net[471]);
  xor inst_306 (net[478], net[462], net[470]);
  xor inst_307 (net[477], net[461], net[469]);
  xor inst_308 (net[476], net[460], net[468]);
  xor inst_309 (net[475], net[459], net[467]);
  xor inst_310 (net[474], net[458], net[466]);
  xor inst_311 (net[473], net[457], net[465]);
  xor inst_312 (net[472], net[456], net[464]);
  assign net[471] = v514[7];
  assign net[470] = v514[6];
  assign net[469] = v514[5];
  assign net[468] = v514[4];
  assign net[467] = v514[3];
  assign net[466] = v514[2];
  assign net[465] = v514[1];
  assign net[464] = v514[0];
  assign net[463] = v510[7];
  assign net[462] = v510[6];
  assign net[461] = v510[5];
  assign net[460] = v510[4];
  assign net[459] = v510[3];
  assign net[458] = v510[2];
  assign net[457] = v510[1];
  assign net[456] = v510[0];
  assign v517 = v494[3];
  assign v516 = v494[2];
  assign v515 = v494[1];
  assign v514 = v494[0];
  assign v513 = v490[3];
  assign v512 = v490[2];
  assign v511 = v490[1];
  assign v510 = v490[0];
  assign v509 = {v508, v507, v506, v505};
  assign v508 = {net[455], net[454], net[453], net[452], net[451], net[450], net[449], net[448]};
  xor inst_339 (net[455], net[439], net[447]);
  xor inst_340 (net[454], net[438], net[446]);
  xor inst_341 (net[453], net[437], net[445]);
  xor inst_342 (net[452], net[436], net[444]);
  xor inst_343 (net[451], net[435], net[443]);
  xor inst_344 (net[450], net[434], net[442]);
  xor inst_345 (net[449], net[433], net[441]);
  xor inst_346 (net[448], net[432], net[440]);
  assign net[447] = v504[7];
  assign net[446] = v504[6];
  assign net[445] = v504[5];
  assign net[444] = v504[4];
  assign net[443] = v504[3];
  assign net[442] = v504[2];
  assign net[441] = v504[1];
  assign net[440] = v504[0];
  assign net[439] = v500[7];
  assign net[438] = v500[6];
  assign net[437] = v500[5];
  assign net[436] = v500[4];
  assign net[435] = v500[3];
  assign net[434] = v500[2];
  assign net[433] = v500[1];
  assign net[432] = v500[0];
  assign v507 = {net[431], net[430], net[429], net[428], net[427], net[426], net[425], net[424]};
  xor inst_364 (net[431], net[415], net[423]);
  xor inst_365 (net[430], net[414], net[422]);
  xor inst_366 (net[429], net[413], net[421]);
  xor inst_367 (net[428], net[412], net[420]);
  xor inst_368 (net[427], net[411], net[419]);
  xor inst_369 (net[426], net[410], net[418]);
  xor inst_370 (net[425], net[409], net[417]);
  xor inst_371 (net[424], net[408], net[416]);
  assign net[423] = v503[7];
  assign net[422] = v503[6];
  assign net[421] = v503[5];
  assign net[420] = v503[4];
  assign net[419] = v503[3];
  assign net[418] = v503[2];
  assign net[417] = v503[1];
  assign net[416] = v503[0];
  assign net[415] = v499[7];
  assign net[414] = v499[6];
  assign net[413] = v499[5];
  assign net[412] = v499[4];
  assign net[411] = v499[3];
  assign net[410] = v499[2];
  assign net[409] = v499[1];
  assign net[408] = v499[0];
  assign v506 = {net[407], net[406], net[405], net[404], net[403], net[402], net[401], net[400]};
  xor inst_389 (net[407], net[391], net[399]);
  xor inst_390 (net[406], net[390], net[398]);
  xor inst_391 (net[405], net[389], net[397]);
  xor inst_392 (net[404], net[388], net[396]);
  xor inst_393 (net[403], net[387], net[395]);
  xor inst_394 (net[402], net[386], net[394]);
  xor inst_395 (net[401], net[385], net[393]);
  xor inst_396 (net[400], net[384], net[392]);
  assign net[399] = v502[7];
  assign net[398] = v502[6];
  assign net[397] = v502[5];
  assign net[396] = v502[4];
  assign net[395] = v502[3];
  assign net[394] = v502[2];
  assign net[393] = v502[1];
  assign net[392] = v502[0];
  assign net[391] = v498[7];
  assign net[390] = v498[6];
  assign net[389] = v498[5];
  assign net[388] = v498[4];
  assign net[387] = v498[3];
  assign net[386] = v498[2];
  assign net[385] = v498[1];
  assign net[384] = v498[0];
  assign v505 = {net[383], net[382], net[381], net[380], net[379], net[378], net[377], net[376]};
  xor inst_414 (net[383], net[367], net[375]);
  xor inst_415 (net[382], net[366], net[374]);
  xor inst_416 (net[381], net[365], net[373]);
  xor inst_417 (net[380], net[364], net[372]);
  xor inst_418 (net[379], net[363], net[371]);
  xor inst_419 (net[378], net[362], net[370]);
  xor inst_420 (net[377], net[361], net[369]);
  xor inst_421 (net[376], net[360], net[368]);
  assign net[375] = v501[7];
  assign net[374] = v501[6];
  assign net[373] = v501[5];
  assign net[372] = v501[4];
  assign net[371] = v501[3];
  assign net[370] = v501[2];
  assign net[369] = v501[1];
  assign net[368] = v501[0];
  assign net[367] = v497[7];
  assign net[366] = v497[6];
  assign net[365] = v497[5];
  assign net[364] = v497[4];
  assign net[363] = v497[3];
  assign net[362] = v497[2];
  assign net[361] = v497[1];
  assign net[360] = v497[0];
  assign v504 = v493[3];
  assign v503 = v493[2];
  assign v502 = v493[1];
  assign v501 = v493[0];
  assign v500 = v489[3];
  assign v499 = v489[2];
  assign v498 = v489[1];
  assign v497 = v489[0];
  assign v496 = v484[3];
  assign v495 = v484[2];
  assign v494 = v484[1];
  assign v493 = v484[0];
  assign v492 = v488[3];
  assign v491 = v488[2];
  assign v490 = v488[1];
  assign v489 = v488[0];
  assign v488 = v486[v487];
  assign v487 = {net[359]};
  assign v486 = {v485, v432};
  aes_mix_columns inst_457 (.op_i(1'b1), .data_i(v432), .data_o(v485));
  assign v484 = v483[v439];
  assign v483 = {v482, v481, v437, v482};
  aes_mix_columns inst_460 (.op_i(op_i), .data_i(v481), .data_o(v482));
  aes_shift_rows inst_461 (.op_i(op_i), .data_i(v480), .data_o(v481));
  assign v480 = {v479, v470, v461, v452};
  assign v479 = {v478, v477, v476, v475};
  aes_sbox_lut inst_464 (.op_i(op_i), .data_i(v474), .data_o(v478));
  aes_sbox_lut inst_465 (.op_i(op_i), .data_i(v473), .data_o(v477));
  aes_sbox_lut inst_466 (.op_i(op_i), .data_i(v472), .data_o(v476));
  aes_sbox_lut inst_467 (.op_i(op_i), .data_i(v471), .data_o(v475));
  assign v474 = v443[3];
  assign v473 = v443[2];
  assign v472 = v443[1];
  assign v471 = v443[0];
  assign v470 = {v469, v468, v467, v466};
  aes_sbox_lut inst_473 (.op_i(op_i), .data_i(v465), .data_o(v469));
  aes_sbox_lut inst_474 (.op_i(op_i), .data_i(v464), .data_o(v468));
  aes_sbox_lut inst_475 (.op_i(op_i), .data_i(v463), .data_o(v467));
  aes_sbox_lut inst_476 (.op_i(op_i), .data_i(v462), .data_o(v466));
  assign v465 = v442[3];
  assign v464 = v442[2];
  assign v463 = v442[1];
  assign v462 = v442[0];
  assign v461 = {v460, v459, v458, v457};
  aes_sbox_lut inst_482 (.op_i(op_i), .data_i(v456), .data_o(v460));
  aes_sbox_lut inst_483 (.op_i(op_i), .data_i(v455), .data_o(v459));
  aes_sbox_lut inst_484 (.op_i(op_i), .data_i(v454), .data_o(v458));
  aes_sbox_lut inst_485 (.op_i(op_i), .data_i(v453), .data_o(v457));
  assign v456 = v441[3];
  assign v455 = v441[2];
  assign v454 = v441[1];
  assign v453 = v441[0];
  assign v452 = {v451, v450, v449, v448};
  aes_sbox_lut inst_491 (.op_i(op_i), .data_i(v447), .data_o(v451));
  aes_sbox_lut inst_492 (.op_i(op_i), .data_i(v446), .data_o(v450));
  aes_sbox_lut inst_493 (.op_i(op_i), .data_i(v445), .data_o(v449));
  aes_sbox_lut inst_494 (.op_i(op_i), .data_i(v444), .data_o(v448));
  assign v447 = v440[3];
  assign v446 = v440[2];
  assign v445 = v440[1];
  assign v444 = v440[0];
  assign v443 = v437[3];
  assign v442 = v437[2];
  assign v441 = v437[1];
  assign v440 = v437[0];
  and inst_503 (net[359], net[358], op_i);
  nor inst_504 (net[358], net[338], net[357]);
  assign v439 = {net[357], net[338]};
  and inst_506 (net[357], net[355], net[356]);
  and inst_507 (net[356], net[353], net[354]);
  and inst_508 (net[355], net[351], net[352]);
  assign net[354] = v438[3];
  assign net[353] = v438[2];
  assign net[352] = v438[1];
  assign net[351] = v438[0];
  assign v438 = {net[350], net[349], net[348], net[347]};
  xnor inst_514 (net[350], net[342], net[346]);
  xnor inst_515 (net[349], net[341], net[345]);
  xnor inst_516 (net[348], net[340], net[344]);
  xnor inst_517 (net[347], net[339], net[343]);
  assign net[346] = v405[3];
  assign net[345] = v405[2];
  assign net[344] = v405[1];
  assign net[343] = v405[0];
  assign net[342] = v316[3];
  assign net[341] = v316[2];
  assign net[340] = v316[1];
  assign net[339] = v316[0];
  assign v437 = v435[v436];
  assign v436 = {net[338]};
  assign v435 = {v1, v433};
  and inst_529 (net[338], net[336], net[337]);
  and inst_530 (net[337], net[334], net[335]);
  and inst_531 (net[336], net[332], net[333]);
  assign net[335] = v434[3];
  assign net[334] = v434[2];
  assign net[333] = v434[1];
  assign net[332] = v434[0];
  assign v434 = {net[331], net[330], net[329], net[328]};
  xnor inst_537 (net[331], net[323], net[327]);
  xnor inst_538 (net[330], net[322], net[326]);
  xnor inst_539 (net[329], net[321], net[325]);
  xnor inst_540 (net[328], net[320], net[324]);
  assign net[327] = v404[3];
  assign net[326] = v404[2];
  assign net[325] = v404[1];
  assign net[324] = v404[0];
  assign net[323] = v316[3];
  assign net[322] = v316[2];
  assign net[321] = v316[1];
  assign net[320] = v316[0];
  assign v432 = {v431, v430, v429, v428};
  assign v431 = {v427, v423, v419, v415};
  assign v430 = {v426, v422, v418, v414};
  assign v429 = {v425, v421, v417, v413};
  assign v428 = {v424, v420, v416, v412};
  assign v427 = v411[3];
  assign v426 = v411[2];
  assign v425 = v411[1];
  assign v424 = v411[0];
  assign v423 = v410[3];
  assign v422 = v410[2];
  assign v421 = v410[1];
  assign v420 = v410[0];
  assign v419 = v409[3];
  assign v418 = v409[2];
  assign v417 = v409[1];
  assign v416 = v409[0];
  assign v415 = v408[3];
  assign v414 = v408[2];
  assign v413 = v408[1];
  assign v412 = v408[0];
  assign v411 = v407[3];
  assign v410 = v407[2];
  assign v409 = v407[1];
  assign v408 = v407[0];
  assign v407 = v406[v236];
  assign v406 = {{{8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}}, v403, v402, v402};
  assign v405 = 4'he;
  assign v404 = 4'h0;
  assign v403 = v0[1];
  assign v402 = v0[0];
  assign v401 = v399[v400];
  assign v400 = {net[73]};
  assign v399 = {v398, v0};
  assign v398 = v397[v179];
  assign v397 = {key_init_i, v396, v0, key_init_i};
  aes_key_expand inst_585 (.clk_i(clk_i), .rst_ni(rst_ni), .op_i(net[295]), .step_i(net[128]), .clear_i(net[134]), .round_i(v316), .key_len_i(key_len_i), .key_i(v0), .key_o(v396));
  assign v395 = {prng_data_i, prng_data_i};
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      v2 <= 3'h0;
    end else
      if (1'b1) begin
        v2 <= v296;
    end
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      v3 <= 4'h0;
    end else
      if (1'b1) begin
        v3 <= v316;
    end
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      v4 <= 4'h0;
    end else
      if (1'b1) begin
        v4 <= v330;
    end
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      net[0] <= 1'b0;
    end else
      if (1'b1) begin
        net[0] <= net[245];
    end
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      net[1] <= 1'b0;
    end else
      if (1'b1) begin
        net[1] <= net[279];
    end
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      net[2] <= 1'b0;
    end else
      if (1'b1) begin
        net[2] <= net[286];
    end
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      net[3] <= 1'b0;
    end else
      if (1'b1) begin
        net[3] <= net[293];
    end
  end

  and inst_594 (net[319], net[317], net[318]);
  and inst_595 (net[318], net[315], net[316]);
  and inst_596 (net[317], net[313], net[314]);
  assign net[316] = v394[3];
  assign net[315] = v394[2];
  assign net[314] = v394[1];
  assign net[313] = v394[0];
  assign v394 = {net[312], net[311], net[310], net[309]};
  xnor inst_602 (net[312], net[304], net[308]);
  xnor inst_603 (net[311], net[303], net[307]);
  xnor inst_604 (net[310], net[302], net[306]);
  xnor inst_605 (net[309], net[301], net[305]);
  assign net[308] = v4[3];
  assign net[307] = v4[2];
  assign net[306] = v4[1];
  assign net[305] = v4[0];
  assign net[304] = v393[3];
  assign net[303] = v393[2];
  assign net[302] = v393[1];
  assign net[301] = v393[0];
  assign v393 = {net[299], net[298], net[297], net[296]};
  assign net[300] = v392[4];
  assign net[299] = v392[3];
  assign net[298] = v392[2];
  assign net[297] = v392[1];
  assign net[296] = v392[0];
  assign v392 = (v3 + v391);
  assign v391 = 4'h2;
  assign net[295] = v389[v390];
  assign v390 = {net[294]};
  assign v389 = {1'b0, op_i};
  or inst_625 (net[294], net[1], net[279]);
  assign net[293] = v388[v2];
  assign v388 = {net[292], net[3], net[3], net[3], net[3], net[291]};
  assign net[292] = v386[v387];
  assign v387 = {out_ready_i};
  assign v386 = {1'b0, net[3]};
  assign net[291] = v376[v385];
  assign v385 = v383[v384];
  assign v384 = {net[290]};
  assign v383 = {v378, v382};
  and inst_635 (net[290], in_valid_i, net[289]);
  or inst_636 (net[289], key_clear_i, data_out_clear_i);
  assign v382 = v380[v381];
  assign v381 = {net[288]};
  assign v380 = {v379, v377};
  and inst_640 (net[288], in_valid_i, net[287]);
  or inst_641 (net[287], dec_key_gen_i, crypt_i);
  assign v379 = 2'h2;
  assign v378 = 2'h1;
  assign v377 = 2'h0;
  assign v376 = {net[3], data_out_clear_i, net[3]};
  assign net[286] = v375[v2];
  assign v375 = {net[285], net[2], net[2], net[2], net[2], net[284]};
  assign net[285] = v373[v374];
  assign v374 = {out_ready_i};
  assign v373 = {1'b0, net[2]};
  assign net[284] = v363[v372];
  assign v372 = v370[v371];
  assign v371 = {net[283]};
  assign v370 = {v365, v369};
  and inst_655 (net[283], in_valid_i, net[282]);
  or inst_656 (net[282], key_clear_i, data_out_clear_i);
  assign v369 = v367[v368];
  assign v368 = {net[281]};
  assign v367 = {v366, v364};
  and inst_660 (net[281], in_valid_i, net[280]);
  or inst_661 (net[280], dec_key_gen_i, crypt_i);
  assign v366 = 2'h2;
  assign v365 = 2'h1;
  assign v364 = 2'h0;
  assign v363 = {net[2], key_clear_i, net[2]};
  assign net[279] = v362[v2];
  assign v362 = {net[1], net[1], net[278], net[277], net[1], net[250]};
  assign net[278] = v360[v361];
  assign v361 = {out_ready_i};
  assign v360 = {1'b0, net[1]};
  assign net[277] = v358[v359];
  assign v359 = {net[276]};
  assign v358 = {1'b0, net[1]};
  and inst_674 (net[276], net[275], out_ready_i);
  and inst_675 (net[275], net[274], net[1]);
  and inst_676 (net[274], net[272], net[273]);
  and inst_677 (net[273], net[270], net[271]);
  and inst_678 (net[272], net[268], net[269]);
  assign net[271] = v357[3];
  assign net[270] = v357[2];
  assign net[269] = v357[1];
  assign net[268] = v357[0];
  assign v357 = {net[267], net[266], net[265], net[264]};
  xnor inst_684 (net[267], net[259], net[263]);
  xnor inst_685 (net[266], net[258], net[262]);
  xnor inst_686 (net[265], net[257], net[261]);
  xnor inst_687 (net[264], net[256], net[260]);
  assign net[263] = v4[3];
  assign net[262] = v4[2];
  assign net[261] = v4[1];
  assign net[260] = v4[0];
  assign net[259] = v356[3];
  assign net[258] = v356[2];
  assign net[257] = v356[1];
  assign net[256] = v356[0];
  assign v356 = {net[254], net[253], net[252], net[251]};
  assign net[255] = v355[4];
  assign net[254] = v355[3];
  assign net[253] = v355[2];
  assign net[252] = v355[1];
  assign net[251] = v355[0];
  assign v355 = (v3 + v354);
  assign v354 = 4'h2;
  assign net[250] = v344[v353];
  assign v353 = v351[v352];
  assign v352 = {net[249]};
  assign v351 = {v346, v350};
  and inst_708 (net[249], in_valid_i, net[248]);
  or inst_709 (net[248], key_clear_i, data_out_clear_i);
  assign v350 = v348[v349];
  assign v349 = {net[247]};
  assign v348 = {v347, v345};
  and inst_713 (net[247], in_valid_i, net[246]);
  or inst_714 (net[246], dec_key_gen_i, crypt_i);
  assign v347 = 2'h2;
  assign v346 = 2'h1;
  assign v345 = 2'h0;
  assign v344 = {dec_key_gen_i, 1'b0, 1'b0};
  assign net[245] = v343[v2];
  assign v343 = {net[0], net[0], net[244], net[0], net[0], net[243]};
  assign net[244] = v341[v342];
  assign v342 = {out_ready_i};
  assign v341 = {1'b0, net[0]};
  assign net[243] = v331[v340];
  assign v340 = v338[v339];
  assign v339 = {net[242]};
  assign v338 = {v333, v337};
  and inst_728 (net[242], in_valid_i, net[241]);
  or inst_729 (net[241], key_clear_i, data_out_clear_i);
  assign v337 = v335[v336];
  assign v336 = {net[240]};
  assign v335 = {v334, v332};
  and inst_733 (net[240], in_valid_i, net[239]);
  or inst_734 (net[239], dec_key_gen_i, crypt_i);
  assign v334 = 2'h2;
  assign v333 = 2'h1;
  assign v332 = 2'h0;
  assign v331 = {net[238], net[0], net[0]};
  not inst_739 (net[238], dec_key_gen_i);
  assign v330 = v329[v2];
  assign v329 = {v4, v4, v4, v4, v4, v328};
  assign v328 = v318[v327];
  assign v327 = v325[v326];
  assign v326 = {net[237]};
  assign v325 = {v320, v324};
  and inst_746 (net[237], in_valid_i, net[236]);
  or inst_747 (net[236], key_clear_i, data_out_clear_i);
  assign v324 = v322[v323];
  assign v323 = {net[235]};
  assign v322 = {v321, v319};
  and inst_751 (net[235], in_valid_i, net[234]);
  or inst_752 (net[234], dec_key_gen_i, crypt_i);
  assign v321 = 2'h2;
  assign v320 = 2'h1;
  assign v319 = 2'h0;
  assign v318 = {v317, v4, v4};
  assign v317 = 4'he;
  assign v316 = v315[v2];
  assign v315 = {v3, v3, v314, v311, v3, v308};
  assign v314 = {net[232], net[231], net[230], net[229]};
  assign net[233] = v313[4];
  assign net[232] = v313[3];
  assign net[231] = v313[2];
  assign net[230] = v313[1];
  assign net[229] = v313[0];
  assign v313 = (v3 + v312);
  assign v312 = 4'h1;
  assign v311 = {net[227], net[226], net[225], net[224]};
  assign net[228] = v310[4];
  assign net[227] = v310[3];
  assign net[226] = v310[2];
  assign net[225] = v310[1];
  assign net[224] = v310[0];
  assign v310 = (v3 + v309);
  assign v309 = 4'h1;
  assign v308 = v298[v307];
  assign v307 = v305[v306];
  assign v306 = {net[223]};
  assign v305 = {v300, v304};
  and inst_780 (net[223], in_valid_i, net[222]);
  or inst_781 (net[222], key_clear_i, data_out_clear_i);
  assign v304 = v302[v303];
  assign v303 = {net[221]};
  assign v302 = {v301, v299};
  and inst_785 (net[221], in_valid_i, net[220]);
  or inst_786 (net[220], dec_key_gen_i, crypt_i);
  assign v301 = 2'h2;
  assign v300 = 2'h1;
  assign v299 = 2'h0;
  assign v298 = {v297, v3, v3};
  assign v297 = 4'h0;
  assign v296 = v295[v2];
  assign v295 = {v294, v290, v289, v285, v269, v268};
  assign v294 = v292[v293];
  assign v293 = {out_ready_i};
  assign v292 = {v291, v2};
  assign v291 = 3'h0;
  assign v290 = 3'h5;
  assign v289 = v287[v288];
  assign v288 = {out_ready_i};
  assign v287 = {v286, v2};
  assign v286 = 3'h0;
  assign v285 = v283[v284];
  assign v284 = {net[195]};
  assign v283 = {v274, v282};
  assign v282 = v280[v281];
  assign v281 = {net[219]};
  assign v280 = {v279, v2};
  assign v279 = 3'h3;
  and inst_810 (net[219], net[217], net[218]);
  and inst_811 (net[218], net[215], net[216]);
  and inst_812 (net[217], net[213], net[214]);
  assign net[216] = v278[3];
  assign net[215] = v278[2];
  assign net[214] = v278[1];
  assign net[213] = v278[0];
  assign v278 = {net[212], net[211], net[210], net[209]};
  xnor inst_818 (net[212], net[204], net[208]);
  xnor inst_819 (net[211], net[203], net[207]);
  xnor inst_820 (net[210], net[202], net[206]);
  xnor inst_821 (net[209], net[201], net[205]);
  assign net[208] = v4[3];
  assign net[207] = v4[2];
  assign net[206] = v4[1];
  assign net[205] = v4[0];
  assign net[204] = v277[3];
  assign net[203] = v277[2];
  assign net[202] = v277[1];
  assign net[201] = v277[0];
  assign v277 = {net[199], net[198], net[197], net[196]};
  assign net[200] = v276[4];
  assign net[199] = v276[3];
  assign net[198] = v276[2];
  assign net[197] = v276[1];
  assign net[196] = v276[0];
  assign v276 = (v3 + v275);
  assign v275 = 4'h2;
  assign v274 = 3'h0;
  and inst_839 (net[195], net[194], out_ready_i);
  and inst_840 (net[194], net[193], net[1]);
  and inst_841 (net[193], net[191], net[192]);
  and inst_842 (net[192], net[189], net[190]);
  and inst_843 (net[191], net[187], net[188]);
  assign net[190] = v273[3];
  assign net[189] = v273[2];
  assign net[188] = v273[1];
  assign net[187] = v273[0];
  assign v273 = {net[186], net[185], net[184], net[183]};
  xnor inst_849 (net[186], net[178], net[182]);
  xnor inst_850 (net[185], net[177], net[181]);
  xnor inst_851 (net[184], net[176], net[180]);
  xnor inst_852 (net[183], net[175], net[179]);
  assign net[182] = v4[3];
  assign net[181] = v4[2];
  assign net[180] = v4[1];
  assign net[179] = v4[0];
  assign net[178] = v272[3];
  assign net[177] = v272[2];
  assign net[176] = v272[1];
  assign net[175] = v272[0];
  assign v272 = {net[173], net[172], net[171], net[170]};
  assign net[174] = v271[4];
  assign net[173] = v271[3];
  assign net[172] = v271[2];
  assign net[171] = v271[1];
  assign net[170] = v271[0];
  assign v271 = (v3 + v270);
  assign v270 = 4'h2;
  assign v269 = 3'h2;
  assign v268 = v258[v267];
  assign v267 = v265[v266];
  assign v266 = {net[169]};
  assign v265 = {v260, v264};
  and inst_874 (net[169], in_valid_i, net[168]);
  or inst_875 (net[168], key_clear_i, data_out_clear_i);
  assign v264 = v262[v263];
  assign v263 = {net[167]};
  assign v262 = {v261, v259};
  and inst_879 (net[167], in_valid_i, net[166]);
  or inst_880 (net[166], dec_key_gen_i, crypt_i);
  assign v261 = 2'h2;
  assign v260 = 2'h1;
  assign v259 = 2'h0;
  assign v258 = {v257, v256, v2};
  assign v257 = 3'h1;
  assign v256 = v254[v255];
  assign v255 = {data_out_clear_i};
  assign v254 = {v253, v252};
  assign v253 = 3'h4;
  assign v252 = 3'h5;
  assign net[165] = v251[v2];
  assign v251 = {net[164], 1'b0, 1'b0, net[163], 1'b0, net[162]};
  assign net[164] = v249[v250];
  assign v250 = {net[3]};
  assign v249 = 2'h0;
  assign net[163] = v247[v248];
  assign v248 = {op_i};
  assign v247 = 2'h2;
  assign net[162] = v237[v246];
  assign v246 = v244[v245];
  assign v245 = {net[161]};
  assign v244 = {v239, v243};
  and inst_903 (net[161], in_valid_i, net[160]);
  or inst_904 (net[160], key_clear_i, data_out_clear_i);
  assign v243 = v241[v242];
  assign v242 = {net[159]};
  assign v241 = {v240, v238};
  and inst_908 (net[159], in_valid_i, net[158]);
  or inst_909 (net[158], dec_key_gen_i, crypt_i);
  assign v240 = 2'h2;
  assign v239 = 2'h1;
  assign v238 = 2'h0;
  assign v237 = 3'h0;
  assign v236 = v235[v2];
  assign v235 = {v234, v8, v230, v221, v212, v203};
  assign v234 = v232[v233];
  assign v233 = {net[3]};
  assign v232 = {v231, v8};
  assign v231 = 2'h3;
  assign v230 = v228[v229];
  assign v229 = {net[1]};
  assign v228 = {v227, v226};
  assign v227 = 2'h3;
  assign v226 = v224[v225];
  assign v225 = {op_i};
  assign v224 = {v223, v222};
  assign v223 = 2'h0;
  assign v222 = 2'h2;
  assign v221 = v219[v220];
  assign v220 = {net[1]};
  assign v219 = {v218, v217};
  assign v218 = 2'h3;
  assign v217 = v215[v216];
  assign v216 = {op_i};
  assign v215 = {v214, v213};
  assign v214 = 2'h0;
  assign v213 = 2'h2;
  assign v212 = v210[v211];
  assign v211 = {net[1]};
  assign v210 = {v209, v208};
  assign v209 = 2'h3;
  assign v208 = v206[v207];
  assign v207 = {op_i};
  assign v206 = {v205, v204};
  assign v205 = 2'h2;
  assign v204 = 2'h0;
  assign v203 = v193[v202];
  assign v202 = v200[v201];
  assign v201 = {net[157]};
  assign v200 = {v195, v199};
  and inst_951 (net[157], in_valid_i, net[156]);
  or inst_952 (net[156], key_clear_i, data_out_clear_i);
  assign v199 = v197[v198];
  assign v198 = {net[155]};
  assign v197 = {v196, v194};
  and inst_956 (net[155], in_valid_i, net[154]);
  or inst_957 (net[154], dec_key_gen_i, crypt_i);
  assign v196 = 2'h2;
  assign v195 = 2'h1;
  assign v194 = 2'h0;
  assign v193 = {v8, v8, v8};
  assign net[153] = v192[v2];
  assign v192 = {net[152], 1'b0, 1'b0, 1'b0, 1'b0, net[151]};
  assign net[152] = v190[v191];
  assign v191 = {net[2]};
  assign v190 = 2'h2;
  assign net[151] = v180[v189];
  assign v189 = v187[v188];
  assign v188 = {net[150]};
  assign v187 = {v182, v186};
  and inst_971 (net[150], in_valid_i, net[149]);
  or inst_972 (net[149], key_clear_i, data_out_clear_i);
  assign v186 = v184[v185];
  assign v185 = {net[148]};
  assign v184 = {v183, v181};
  and inst_976 (net[148], in_valid_i, net[147]);
  or inst_977 (net[147], dec_key_gen_i, crypt_i);
  assign v183 = 2'h2;
  assign v182 = 2'h1;
  assign v181 = 2'h0;
  assign v180 = 3'h0;
  assign v179 = v178[v2];
  assign v178 = {v177, v7, v7, v7, v7, v173};
  assign v177 = v175[v176];
  assign v176 = {net[2]};
  assign v175 = {v174, v7};
  assign v174 = 2'h3;
  assign v173 = v163[v172];
  assign v172 = v170[v171];
  assign v171 = {net[146]};
  assign v170 = {v165, v169};
  and inst_992 (net[146], in_valid_i, net[145]);
  or inst_993 (net[145], key_clear_i, data_out_clear_i);
  assign v169 = v167[v168];
  assign v168 = {net[144]};
  assign v167 = {v166, v164};
  and inst_997 (net[144], in_valid_i, net[143]);
  or inst_998 (net[143], dec_key_gen_i, crypt_i);
  assign v166 = 2'h2;
  assign v165 = 2'h1;
  assign v164 = 2'h0;
  assign v163 = {v162, v7, v7};
  assign v162 = v160[v161];
  assign v161 = {dec_key_gen_i};
  assign v160 = {v159, v158};
  assign v159 = 2'h0;
  assign v158 = v156[v157];
  assign v157 = {op_i};
  assign v156 = {v155, v154};
  assign v155 = 2'h1;
  assign v154 = 2'h0;
  assign v153 = v152[v2];
  assign v152 = {v151, v6, v147, v6, v146, v145};
  assign v151 = v149[v150];
  assign v150 = {net[3]};
  assign v149 = {v148, v6};
  assign v148 = 2'h0;
  assign v147 = 2'h2;
  assign v146 = 2'h0;
  assign v145 = v135[v144];
  assign v144 = v142[v143];
  assign v143 = {net[142]};
  assign v142 = {v137, v141};
  and inst_1024 (net[142], in_valid_i, net[141]);
  or inst_1025 (net[141], key_clear_i, data_out_clear_i);
  assign v141 = v139[v140];
  assign v140 = {net[140]};
  assign v139 = {v138, v136};
  and inst_1029 (net[140], in_valid_i, net[139]);
  or inst_1030 (net[139], dec_key_gen_i, crypt_i);
  assign v138 = 2'h2;
  assign v137 = 2'h1;
  assign v136 = 2'h0;
  assign v135 = {v6, v6, v6};
  assign v134 = v133[v2];
  assign v133 = {v5, v132, v131, v5, v5, v127};
  assign v132 = 2'h2;
  assign v131 = v129[v130];
  assign v130 = {out_ready_i};
  assign v129 = {v128, v5};
  assign v128 = 2'h2;
  assign v127 = v117[v126];
  assign v126 = v124[v125];
  assign v125 = {net[138]};
  assign v124 = {v119, v123};
  and inst_1046 (net[138], in_valid_i, net[137]);
  or inst_1047 (net[137], key_clear_i, data_out_clear_i);
  assign v123 = v121[v122];
  assign v122 = {net[136]};
  assign v121 = {v120, v118};
  and inst_1051 (net[136], in_valid_i, net[135]);
  or inst_1052 (net[135], dec_key_gen_i, crypt_i);
  assign v120 = 2'h2;
  assign v119 = 2'h1;
  assign v118 = 2'h0;
  assign v117 = {v116, v5, v5};
  assign v116 = v114[v115];
  assign v115 = {dec_key_gen_i};
  assign v114 = {v113, v112};
  assign v113 = 2'h2;
  assign v112 = 2'h0;
  assign net[134] = v111[v2];
  assign v111 = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, net[133]};
  assign net[133] = v101[v110];
  assign v110 = v108[v109];
  assign v109 = {net[132]};
  assign v108 = {v103, v107};
  and inst_1068 (net[132], in_valid_i, net[131]);
  or inst_1069 (net[131], key_clear_i, data_out_clear_i);
  assign v107 = v105[v106];
  assign v106 = {net[130]};
  assign v105 = {v104, v102};
  and inst_1073 (net[130], in_valid_i, net[129]);
  or inst_1074 (net[129], dec_key_gen_i, crypt_i);
  assign v104 = 2'h2;
  assign v103 = 2'h1;
  assign v102 = 2'h0;
  assign v101 = 3'h4;
  assign net[128] = v100[v2];
  assign v100 = {1'b0, 1'b0, 1'b0, 1'b1, net[127], net[111]};
  assign net[127] = v98[v99];
  assign v99 = {net[126]};
  assign v98 = 2'h2;
  not inst_1084 (net[126], net[125]);
  and inst_1085 (net[125], net[121], net[124]);
  and inst_1086 (net[124], net[122], net[123]);
  assign net[123] = v97[2];
  assign net[122] = v97[1];
  assign net[121] = v97[0];
  assign v97 = {net[120], net[119], net[118]};
  xnor inst_1091 (net[120], net[114], net[117]);
  xnor inst_1092 (net[119], net[113], net[116]);
  xnor inst_1093 (net[118], net[112], net[115]);
  assign net[117] = v96[2];
  assign net[116] = v96[1];
  assign net[115] = v96[0];
  assign net[114] = key_len_i[2];
  assign net[113] = key_len_i[1];
  assign net[112] = key_len_i[0];
  assign v96 = 3'h4;
  assign net[111] = v86[v95];
  assign v95 = v93[v94];
  assign v94 = {net[110]};
  assign v93 = {v88, v92};
  and inst_1105 (net[110], in_valid_i, net[109]);
  or inst_1106 (net[109], key_clear_i, data_out_clear_i);
  assign v92 = v90[v91];
  assign v91 = {net[108]};
  assign v90 = {v89, v87};
  and inst_1110 (net[108], in_valid_i, net[107]);
  or inst_1111 (net[107], dec_key_gen_i, crypt_i);
  assign v89 = 2'h2;
  assign v88 = 2'h1;
  assign v87 = 2'h0;
  assign v86 = 3'h0;
  assign net[106] = v85[v2];
  assign v85 = {net[105], 1'b0, 1'b0, net[104], 1'b0, net[78]};
  assign net[105] = v83[v84];
  assign v84 = {net[2]};
  assign v83 = 2'h2;
  assign net[104] = v81[v82];
  assign v82 = {net[103]};
  assign v81 = 2'h2;
  and inst_1124 (net[103], net[102], net[1]);
  and inst_1125 (net[102], net[100], net[101]);
  and inst_1126 (net[101], net[98], net[99]);
  and inst_1127 (net[100], net[96], net[97]);
  assign net[99] = v80[3];
  assign net[98] = v80[2];
  assign net[97] = v80[1];
  assign net[96] = v80[0];
  assign v80 = {net[95], net[94], net[93], net[92]};
  xnor inst_1133 (net[95], net[87], net[91]);
  xnor inst_1134 (net[94], net[86], net[90]);
  xnor inst_1135 (net[93], net[85], net[89]);
  xnor inst_1136 (net[92], net[84], net[88]);
  assign net[91] = v4[3];
  assign net[90] = v4[2];
  assign net[89] = v4[1];
  assign net[88] = v4[0];
  assign net[87] = v79[3];
  assign net[86] = v79[2];
  assign net[85] = v79[1];
  assign net[84] = v79[0];
  assign v79 = {net[82], net[81], net[80], net[79]};
  assign net[83] = v78[4];
  assign net[82] = v78[3];
  assign net[81] = v78[2];
  assign net[80] = v78[1];
  assign net[79] = v78[0];
  assign v78 = (v3 + v77);
  assign v77 = 4'h2;
  assign net[78] = v67[v76];
  assign v76 = v74[v75];
  assign v75 = {net[77]};
  assign v74 = {v69, v73};
  and inst_1157 (net[77], in_valid_i, net[76]);
  or inst_1158 (net[76], key_clear_i, data_out_clear_i);
  assign v73 = v71[v72];
  assign v72 = {net[75]};
  assign v71 = {v70, v68};
  and inst_1162 (net[75], in_valid_i, net[74]);
  or inst_1163 (net[74], dec_key_gen_i, crypt_i);
  assign v70 = 2'h2;
  assign v69 = 2'h1;
  assign v68 = 2'h0;
  assign v67 = 3'h0;
  assign net[73] = v66[v2];
  assign v66 = {net[72], 1'b0, 1'b0, 1'b1, net[71], net[55]};
  assign net[72] = v64[v65];
  assign v65 = {net[2]};
  assign v64 = 2'h2;
  assign net[71] = v62[v63];
  assign v63 = {net[70]};
  assign v62 = 2'h2;
  not inst_1176 (net[70], net[69]);
  and inst_1177 (net[69], net[65], net[68]);
  and inst_1178 (net[68], net[66], net[67]);
  assign net[67] = v61[2];
  assign net[66] = v61[1];
  assign net[65] = v61[0];
  assign v61 = {net[64], net[63], net[62]};
  xnor inst_1183 (net[64], net[58], net[61]);
  xnor inst_1184 (net[63], net[57], net[60]);
  xnor inst_1185 (net[62], net[56], net[59]);
  assign net[61] = v60[2];
  assign net[60] = v60[1];
  assign net[59] = v60[0];
  assign net[58] = key_len_i[2];
  assign net[57] = key_len_i[1];
  assign net[56] = key_len_i[0];
  assign v60 = 3'h4;
  assign net[55] = v50[v59];
  assign v59 = v57[v58];
  assign v58 = {net[54]};
  assign v57 = {v52, v56};
  and inst_1197 (net[54], in_valid_i, net[53]);
  or inst_1198 (net[53], key_clear_i, data_out_clear_i);
  assign v56 = v54[v55];
  assign v55 = {net[52]};
  assign v54 = {v53, v51};
  and inst_1202 (net[52], in_valid_i, net[51]);
  or inst_1203 (net[51], dec_key_gen_i, crypt_i);
  assign v53 = 2'h2;
  assign v52 = 2'h1;
  assign v51 = 2'h0;
  assign v50 = 3'h4;
  assign net[50] = v49[v2];
  assign v49 = {1'b0, 1'b1, net[49], net[48], net[47], net[46]};
  assign net[49] = v47[v48];
  assign v48 = {out_ready_i};
  assign v47 = 2'h2;
  not inst_1213 (net[48], net[1]);
  not inst_1214 (net[47], net[1]);
  assign net[46] = v37[v46];
  assign v46 = v44[v45];
  assign v45 = {net[45]};
  assign v44 = {v39, v43};
  and inst_1219 (net[45], in_valid_i, net[44]);
  or inst_1220 (net[44], key_clear_i, data_out_clear_i);
  assign v43 = v41[v42];
  assign v42 = {net[43]};
  assign v41 = {v40, v38};
  and inst_1224 (net[43], in_valid_i, net[42]);
  or inst_1225 (net[42], dec_key_gen_i, crypt_i);
  assign v40 = 2'h2;
  assign v39 = 2'h1;
  assign v38 = 2'h0;
  assign v37 = 3'h4;
  assign net[41] = v36[v2];
  assign v36 = {1'b1, 1'b0, 1'b1, net[40], 1'b0, net[14]};
  assign net[40] = v34[v35];
  assign v35 = {net[39]};
  assign v34 = 2'h2;
  and inst_1235 (net[39], net[38], net[1]);
  and inst_1236 (net[38], net[36], net[37]);
  and inst_1237 (net[37], net[34], net[35]);
  and inst_1238 (net[36], net[32], net[33]);
  assign net[35] = v33[3];
  assign net[34] = v33[2];
  assign net[33] = v33[1];
  assign net[32] = v33[0];
  assign v33 = {net[31], net[30], net[29], net[28]};
  xnor inst_1244 (net[31], net[23], net[27]);
  xnor inst_1245 (net[30], net[22], net[26]);
  xnor inst_1246 (net[29], net[21], net[25]);
  xnor inst_1247 (net[28], net[20], net[24]);
  assign net[27] = v4[3];
  assign net[26] = v4[2];
  assign net[25] = v4[1];
  assign net[24] = v4[0];
  assign net[23] = v32[3];
  assign net[22] = v32[2];
  assign net[21] = v32[1];
  assign net[20] = v32[0];
  assign v32 = {net[18], net[17], net[16], net[15]};
  assign net[19] = v31[4];
  assign net[18] = v31[3];
  assign net[17] = v31[2];
  assign net[16] = v31[1];
  assign net[15] = v31[0];
  assign v31 = (v3 + v30);
  assign v30 = 4'h2;
  assign net[14] = v20[v29];
  assign v29 = v27[v28];
  assign v28 = {net[13]};
  assign v27 = {v22, v26};
  and inst_1268 (net[13], in_valid_i, net[12]);
  or inst_1269 (net[12], key_clear_i, data_out_clear_i);
  assign v26 = v24[v25];
  assign v25 = {net[11]};
  assign v24 = {v23, v21};
  and inst_1273 (net[11], in_valid_i, net[10]);
  or inst_1274 (net[10], dec_key_gen_i, crypt_i);
  assign v23 = 2'h2;
  assign v22 = 2'h1;
  assign v21 = 2'h0;
  assign v20 = 3'h0;
  assign net[9] = v19[v2];
  assign v19 = {1'b0, 1'b0, 1'b0, 1'b0, 1'b0, net[8]};
  assign net[8] = v9[v18];
  assign v18 = v16[v17];
  assign v17 = {net[7]};
  assign v16 = {v11, v15};
  and inst_1285 (net[7], in_valid_i, net[6]);
  or inst_1286 (net[6], key_clear_i, data_out_clear_i);
  assign v15 = v13[v14];
  assign v14 = {net[5]};
  assign v13 = {v12, v10};
  and inst_1290 (net[5], in_valid_i, net[4]);
  or inst_1291 (net[4], dec_key_gen_i, crypt_i);
  assign v12 = 2'h2;
  assign v11 = 2'h1;
  assign v10 = 2'h0;
  assign v9 = 3'h7;
  assign v8 = 2'h3;
  assign v7 = 2'h2;
  assign v6 = 2'h1;
  assign v5 = 2'h1;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      v1 <= {{8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}, {8'h0, 8'h0, 8'h0, 8'h0}};
    end else
      if (1'b1) begin
        v1 <= state_init_i;
    end
  end


endmodule

